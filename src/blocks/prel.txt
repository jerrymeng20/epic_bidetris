template<typename Functor>
static std::vector<Cell*> copyCellMapToSortedVec(std::map<unsigned, Cell*> &cells, Functor f) {
    std::vector<Cell*> res;
    for (auto it: cells) res.emplace_back(it.second);
    std::sort(res.begin(), res.end(), f);
    return res;
}


bool Block::moveDown() {
    if (unplaceable) return false;
    // test if out of bound / occupied
    for (auto &c: cells) {
        CellInfo thisInfo = c.second->getInfo();
        int nextRow = thisInfo.row + 1 + 1*weight;
        if (nextRow > alls->size()) return false;

        int nextCol = thisInfo.col;
        CellInfo nextInfo = (*alls)[nextRow][nextCol].getInfo();
        // if next cell is non empty, and it is not the current block
        if (nextInfo.occupied && nextInfo.timeStamp != timestamp) return false;
    }

    auto cellsAsVec = copyCellMapToSortedVec(cells, [](Cell *l, Cell *r) {
        return l->getInfo().row > r->getInfo().row;
    });
    for (int i = 0; i < 4; ++i) {
        CellInfo thisInfo = cellsAsVec[i]->getInfo();
        std::swap(*cellsAsVec[i], (*alls)[thisInfo.row + 1 + 1*weight][thisInfo.col]);
        cells[i] = &(*alls)[thisInfo.row + 1 + 1*weight][thisInfo.col];
    }
    return true;
}
